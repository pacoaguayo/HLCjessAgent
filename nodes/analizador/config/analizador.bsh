import jade.core.Agent;
import jade.core.behaviours.WakerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPANames;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.FIPAManagementOntology;
import jade.domain.FIPAAgentManagement.Property;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.domain.JADEAgentManagement.JADEManagementOntology;
import jade.util.Logger;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.Hashtable;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.MessageFormat;

import org.apache.commons.codec.binary.Base64;

import bsh.EvalError;
import bsh.Interpreter;
import bsh.util.NameCompletionTable;

import com.dpsframework.core.engines.RBEngine;
import com.dpsframework.domain.ESontology;
import com.dpsframework.domain.Repl;
import com.dpsframework.util.JadeConsole;
import com.dpsframework.util.PsConstants;
import com.dpsframework.util.PsServices;

import com.dpsframework.core.behaviour.MIABMessageProposer;
import com.dpsframework.domain.ESontology;
import com.dpsframework.domain.Repl;
import com.dpsframework.util.JadeConsole;
import com.dpsframework.util.PsConstants;
import com.dpsframework.util.PsServices;
import com.dpsframework.core.behaviour.BhConstants;

import jade.content.lang.Codec;
import jade.content.lang.Codec.CodecException;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;
import jade.core.AID;
import jade.core.behaviours.ThreadedBehaviourFactory;
import jade.domain.FIPANames;
import jade.domain.DFGUIManagement.DFAppletOntology;
import jade.domain.FIPAAgentManagement.FIPAManagementOntology;
import jade.domain.FIPAAgentManagement.FailureException;
import jade.domain.JADEAgentManagement.JADEManagementOntology;
import jade.domain.JADEAgentManagement.ShowGui;
import jade.lang.acl.ACLMessage;
import jade.util.Logger;
import jade.util.leap.HashMap;
import jade.core.behaviours.SimpleBehaviour;
import jade.core.behaviours.WakerBehaviour;


import com.dpsframework.domain.ESontology;

import jade.content.lang.Codec;
import jade.content.lang.sl.SLCodec;
import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.domain.FIPANames;
import jade.domain.DFGUIManagement.DFAppletOntology;
import jade.domain.FIPAAgentManagement.FIPAManagementOntology;
import jade.domain.JADEAgentManagement.JADEManagementOntology;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;

import jade.content.Concept;
import jade.content.ContentManager;
import jade.content.lang.Codec.CodecException;
import jade.content.onto.OntologyException;
import jade.content.onto.UngroundedException;
import jade.content.onto.basic.Action;
import jade.content.onto.basic.Done;
import jade.core.AID;
import jade.core.behaviours.DataStore;
import jade.core.behaviours.OneShotBehaviour;
import jade.domain.FIPANames;
import jade.lang.acl.ACLMessage;
import jade.util.Logger;

import java.text.MessageFormat;

import com.dpsframework.PsNodeAgent;
import com.dpsframework.core.behaviour.BhConstants;
import com.dpsframework.domain.ESontology;
import com.dpsframework.util.PsConstants;


/** 
 * Compartive-Analysis HLCjessAgent vs. dpsNodeAgent.
 * <p>
 * 
 * @see analizador.bsh
 * 
 * @author Ph.D.: Aguayo-Canela, FJ et al. (2019)
 * <p>
 * <small>Department of Electric Engineering, Systems and Automatic<br>
 *         School of Industrial Engineering and Information Technology<br>
 *         &copy; <b>University of Leon</b> - Spain. <a
 *         href="http://www.unileon.es">{http://www.unileon.es}</a>
 * </small>
 * 
 * <pre>
 *|+--------------------------------------------------------------------
 *|            __             DPS-Framework is a directory on file-system
 *|      __   /  \            generated to launch groups of JADE Agent
 *|   __/  \  \__/      __    which runs Expert Systems applications
 *|  /  \__/  /  \   __/  \   developed in CLIPS or Jess Language.
 *|  \__/     \__/  /  \__/   Version: 1.8.(2019)
 *|  /  \     /  \  \__/      Author : Francisco J. Aguayo et al.
 *|  \__/     \__/            Universidad de Leon - Spain
 *+--------------------------------------------------------------------
 * 
 * Message example: 
 * ----------------
 * (REQUEST-WHEN
 *  :sender  ( agent-identifier :name Stage@PEGASUS:1099/JADE  :addresses (sequence http://PEGASUS:7778/acc ))
 *  :receiver  (set ( agent-identifier :name Engine6ed020@Stage ) )
 *  :content  "((action (agent-identifier :name Engine6ed020@Stage) 
 *              (process 
 *                 :language CLIPS 
 *                 :method (sequence MAKE_MEMORY_DUMP nodes/Stage/var/engineWMemoryDump.bsave)
 *              )
 *             ))" 
 *             
 *             
 *  :encoding  fipa.acl.rep.string.std  
 *  :language  fipa-sl0  
 *  :ontology  Expert-Systems  
 *  :protocol  fipa-request
 *  :X-psDateInit "abr 12,2019 15:01" 
 *  :X-psAction Process 
 *  :X-psConversationID Basal_Behaviour 
 *  :X-psSender Stage 
 *  :X-psReceiver Stage 
 * )
 *  
 *  Response:
 *  ---------
 *  (INFORM
 *   :sender  ( agent-identifier :name Stage@PEGASUS:1099/JADE )
 *   :receiver  (set ( agent-identifier :name Stage@PEGASUS:1099/JADE ) )
 *   :content  "((done (action (agent-identifier :name Engine6ed020@Stage) 
 *               		(process 
 *                		:language CLIPS 
 *                		:method (sequence MAKE_MEMORY_DUMP nodes/Stage/var/engineWMemoryDump.bsave)
 *               	   ))
 *              ))"
 *   :encoding  fipa.acl.rep.string.std  
 *   :language  fipa-sl0  
 *   :ontology  Expert-Systems 
 *   :protocol  fipa-request 
 *   :conversation-id  Basal_Behaviour 
 *   :X-psStrEv "(bsave \"nodes/Stage/var/engineWMemoryDump.bsave\")" 
 *   :X-psTimeEnd "0.01 seconds."
 *   :X-psDateInit "20190412-151536" 
 *   :X-psSCode MAKE_MEMORY_DUMP 
 *   :X-psSValue nodes/Stage/var/engineWMemoryDump.bsave 
 *   :X-psOutValue TRUE 
 *   :X-psConversationID Basal_Behaviour 
 *   :X-psReceiver Stage 
 *   :X-psTimeInit 1492002936776 
 *   :X-psAction Process 
 *   :X-psSender Stage 
 *   :X-psOutClass net.sf.clipsrules.jni.SymbolValue 
 *  )
 * ---------
 * Envelope:
 * ---------
 * (Envelope  
 *     :to (sequence  ( agent-identifier :name Stage@PEGASUS:1099/JADE ))  
 *     :from ( agent-identifier :name Stage@PEGASUS:1099/JADE ) 
 *     :comments [CSTRNBIN1] WARNING: Constraints are not saved ...
 *     :acl-representation fipa.acl.rep.string.std 
 *     :payload-length -1 
 *     :date Wed Apr 12 15:15:36 CEST 2019
 * )
 * </pre>
 * 
*/


// Only for - Linux and OS.X consoles:
jconsole .setFont( new Font( "Monaco", Font.PLAIN, 14));



// Banners
acum           = 0;  
phase          = 0; 
verbose        = true;

// ------------------------------------------
// makeReplMessage function.
// ------------------------------------------
codec          = new SLCodec(); 
source( "function.makeReplMessage.bsh" );




// ------------------------------------------
// PingAnAgent-Behaviour Class. 
// ------------------------------------------
public class PingAnAgent extends SimpleBehaviour {
	
   String  agentName = "";       String testNum = "";
   boolean finished = false;
   Agent thisAgent  = null;
   
   
   public PingAnAgent(Agent a, String targeAgentName, String theTestNum) {
      super(a);
      thisAgent = a;
      agentName = targeAgentName;
      testNum = theTestNum;
   }
   
   
   
   public void action() {
     finished = true;
     sendPing();
   }

   
   
   protected void sendPing() { 
	  ACLMessage paam = new ACLMessage(ACLMessage.REQUEST_WHEN);
      paam.addReceiver(new AID(agentName, AID.ISLOCALNAME));
      paam.setSender(thisAgent .getAID());     
      paam.setOntology("presence");
      paam.setPostTimeStamp(System.currentTimeMillis());
      paam.setContent(testNum+":"+System.currentTimeMillis().toString()+":"+agentName+":");
      //content-template: 32:1341371264123:hlc400:
      thisAgent .send(paam);
   }

   public boolean done() {
     return finished; 
   }
}





// ------------------------------------------
// RequestEngine-Behaviour Class. 
// ------------------------------------------
public class RequestEngine extends SimpleBehaviour {
	
	String agentName = "";
	String testNum = "";
	String problem = "";
	boolean finished = false;
	Agent thisAgent = null;


	public RequestEngine(Agent a, String targeAgentName, String theTestNum, String theProblem) {
	   super(a);
	   thisAgent = a;
	   agentName = targeAgentName;
	   testNum = theTestNum;
	   problem = theProblem;
	}


	
	public void action() {
	  finished = true;
	  sendRequest();
	}



	protected void sendRequest() { 
		ACLMessage paam = new ACLMessage(ACLMessage.REQUEST);
		
	    paam.addReceiver(new AID(agentName, AID.ISLOCALNAME));
	    paam.setSender(thisAgent .getAID());  
		paam.setOntology( "Expert-Systems");	
		paam.addUserDefinedParameter("psProblem"  , problem);
		paam.setPostTimeStamp(System.currentTimeMillis());
		paam.setContent(testNum+":"+System.currentTimeMillis().toString()+":"+agentName+":");
		//content-template: 32:1341371264123:hlc400:
		thisAgent .send(paam);
	}

	public boolean done() {
	  return finished; 
	}
}



// ------------------------------------------
// Build 40 Test and put it on Scheduler.
// ------------------------------------------
public class DelayBehaviour extends SimpleBehaviour {

   String  		bName        = "";     String testNum = "";
   boolean 		finished     = false;  String aName = "";
   Agent 		thisAgent    = null;
   long    		timeout, wakeupTime;
   Behaviour 	launchedBB   = null;

   
   public DelayBehaviour(Agent a, long theTimeout) {
      super(a);
      thisAgent = a;
      timeout = theTimeout;
   }
   
   public DelayBehaviour(Agent a, long theTimeout, Behaviour theLanchedBB) {
      super(a);
      thisAgent = a;
      timeout = theTimeout;
      launchedBB = theLanchedBB;
   }
   
   public DelayBehaviour(Agent a, long theTimeout, Behaviour theLanchedBB, String theTestNumber) {
	      super(a);
	      thisAgent = a;
	      timeout = theTimeout;
	      launchedBB = theLanchedBB;
	      testNum = theTestNumber;
	   }
	   
   public DelayBehaviour(Agent a, long theTimeout, Behaviour theLanchedBB, String theTestNumber, String taName) {
	      super(a);
	      thisAgent = a;
	      timeout = theTimeout;
	      launchedBB = theLanchedBB;
	      testNum = theTestNumber;
	      aName = taName;
	   }
	   
   public void onStart() {
      wakeupTime = System.currentTimeMillis() + timeout;
   }
      
   public void action() {
      long dt = wakeupTime - System.currentTimeMillis();
      if (dt <= 0) {
         finished = true;
         handleElapsedTimeout();
      } else 
         block(dt); 
   }
   
	protected void handleElapsedTimeout() {
		myAgent.addBehaviour(launchedBB);
		if (launchedBB instanceof N2NREInitiator ||
			launchedBB instanceof RequestEngine) {
			bName = "s";
		} else {
			bName = "p";
		}
		System.out.println("Launched:" + bName + ":" + testNum + ":" + wakeupTime + ":" + aName + ":");
	}
            
   public boolean done() {
     return finished; 
   }
}





//+---------------------------------------------------------------------------
// Comparative Analysis: Experiment design

// ----1---------1---------1---------1-----
// -  ping       1  Solver 
//+---------------------------------------------------------------------------

int [] pTestNumbers       = new int [] {  1,  2,  3,  4,      6,  7, 8,   9, 10, 
                                         11, 12, 13, 14,     16, 17, 18, 19, 20, 
                                         21, 22, 23, 24,     26, 27, 28, 29, 30, 
                                         31, 32, 33, 34,     36, 37, 38, 39, 40  };


int []    sTestNumbers    = new int [] {  5, 15, 25, 35 };
String [] sudokuTestNames = new String[] { 	"grid3x3-p7.clp",  
											"grid3x3-p1.clp", 
                                            "grid3x3-p17.clp", 
                                            "grid3x3-p10.clp"};




//Parameters of: startAnalysis(int TYPE_OF_MESSAGES, String NAME_OF_TARGET_AGENT)
int ONLY_PING_MESSAGES     	= 1;  
int ONLY_SUDUKUS_MESSAGES 	= 2;  
int BOTH_MESSAGES 			= 4;  
int NONE_MESSAGES 			= 0;
int []     TYPE_OF_MESSAGES = new int [] {ONLY_PING_MESSAGES, ONLY_SUDUKUS_MESSAGES,
		                                  BOTH_MESSAGES,      NONE_MESSAGES};

String     DPS_AGENT_NAME 	= "dpsNodeAC";
String     HLC_AGENT_NAME 	= "hlc400";
String []  NAME_OF_AGENTS   = new String [] { DPS_AGENT_NAME, HLC_AGENT_NAME};



String DATASET_BOTH_NAME  = "datasetBoth.csv";
String DATASET_DPS_NAME   = "datasetDPS.csv";
String DATASET_HLC_NAME   = "datasetHLC.csv";
Hashtable          fLogs = new Hashtable();
			       fLogs.put(DPS_AGENT_NAME, DATASET_DPS_NAME);  
                   fLogs.put(HLC_AGENT_NAME, DATASET_HLC_NAME);  




public void analizador() {
    print("\nUsage: analizador( ['dpsNodeAC' | 'hlc400' ],  [1|2|4|0]  );" +
          "\n\n"+
      	  "ONLY_PING_MESSAGES     = 1;  \n"+
      	  "ONLY_SUDUKUS_MESSAGES  = 2;  \n"+
      	  "BOTH_MESSAGES          = 4;  \n"+
      	  "NONE_MESSAGES          = 0;  \n");
}












// Comparative one more, and more times 
// ----------------------------------------------------------------------------
public void analizador(String agentName,  int analysisMode) {
	
	Hashtable aTypes = new Hashtable();
	aTypes.put(1,"ONLY_PING_MESSAGES");  
	aTypes.put(2,"ONLY_SUDUKUS_MESSAGES");  
	aTypes.put(4,"BOTH_MESSAGES");  
	aTypes.put(0,"NONE_MESSAGES");
    
	
	boolean isBothAgent 		= false;
	String  dpsAgentName 		= DPS_AGENT_NAME;
	String  hlcAgentNane 		= HLC_AGENT_NAME;
	
	
	String  currentAgent    	= "";
	int     currentMode         = 16;



	
	
	
	// Parsing parameters...
	// -----------------------------------------
	for ( s : NAME_OF_AGENTS ) {
		if ( agentName.equals(s) ) {
			currentAgent = s;
		} 
	}
	if (currentAgent.equals("")) {
		print( "Error: agentName="+agentName);
		analizador();
		return;
	}

	
	

	for( a : TYPE_OF_MESSAGES) { 
		if(analysisMode == a) {
			currentMode = a;
		} 
	}
	if (currentMode == 16) {
		print( "Error: analysisMode="+analysisMode);
		analizador();
		return;
	}

	
	print("Mode = "+aTypes.get( currentMode  )+"    AgentName = "+currentAgent+"\n");


	
	
	
	
	
	//----------------------------------------------------------------------------
	// Test begins here...
	//----------------------------------------------------------------------------
	switch(  currentMode  ) {





	  case ONLY_PING_MESSAGES:  case BOTH_MESSAGES:

		  
		for( i=0; i < pTestNumbers.length; i++){
			
			wakeUpTm = (pTestNumbers[i] * timeGap )+waitTime ;
			bhvName  = "Test:" + pTestNumbers[i].toString(); 
			
			bM       = new PingAnAgent( myAgent, currentAgent, bhvName );
			bM.setBehaviourName( bhvName );
			
			bW       = new DelayBehaviour( myAgent, (long)wakeUpTm, bM, pTestNumbers[i].toString(), currentAgent);		
			myAgent .addBehaviour( bW );
			print( bhvName + ":Scheduled to:[" + currentAgent + "] at: " + (System.currentTimeMillis() + wakeUpTm) ); 

		}     	
		if ( currentMode != BOTH_MESSAGES ) { break; }
	    
	    
	    
	    
	  case ONLY_SUDUKUS_MESSAGES:  case BOTH_MESSAGES:
		
	    for( i=0; i < sTestNumbers.length; i++  ){
	    	
	        wakeUpTm = (sTestNumbers[i] * timeGap )+waitTime ;
	        bhvName  = "Test:" + sTestNumbers[i].toString(); 
	        r0       = null;
	        bM       = null;
	        bW       = null;

	        if (currentAgent.equals(HLC_AGENT_NAME)) { 	
	        	orden = sudokuTestNames[i]; 
	        	bM    = new RequestEngine(myAgent, currentAgent, bhvName, orden);
	        } 
	        
	        if (currentAgent.equals(DPS_AGENT_NAME)) {
		        orden    =  "(batch \"nodes/" + currentAgent + "/engine/" + sudokuTestNames[i] + "\" ) (reset) (run)";
		        r0       =  makeReplMessage(currentAgent,    orden  );
		        bM       =  new N2NREInitiator( myAgent, r0 );
	        }

	        bM .setBehaviourName( bhvName );
	        bW       = new DelayBehaviour( myAgent, (long)wakeUpTm, bM, sTestNumbers[i].toString(), currentAgent );
	        myAgent .addBehaviour( bW );
	        print( bhvName + " scheduled on:[" + currentAgent + "] at: " + (System.currentTimeMillis() + wakeUpTm)  ); 

	    }
	    break;
	    
	    
	    
	    
	    //
	  case NONE_MESSAGES:
		print("There isn't any Messages to send...");
		break;
	  default:
		print("Test de code !.. is't usual. See ..defaultAnalysis value.");
		break;
	}
}

// End of main process..
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------





// Function md() to make dataset with results ready for R Software. 
// ----------------------------------------------------------------------------
Hashtable trackMails = new Hashtable();

MessageTemplate pTest10 = MessageTemplate.MatchPerformative(ACLMessage.INFORM);
MessageTemplate pTest11 = MessageTemplate.MatchOntology("presence");

MessageTemplate sTest10 = MessageTemplate.MatchPerformative(ACLMessage.INFORM_IF);
MessageTemplate sTest11 = MessageTemplate.MatchOntology("Expert-Systems");

MessageTemplate pTest   = MessageTemplate.and(pTest10, pTest11);
MessageTemplate sTest   = MessageTemplate.and(sTest10, sTest11);
	
MessageTemplate mtPong  = MessageTemplate.or(pTest, sTest);


public void md() {
	
	trackMails = new Hashtable();
	testAgen = "";
	testNum  = "";
	testInit = "";
	testEnd  = "";
	testTime = "";
	pContents 			= new String []{};
	sContents 			= new String []{};
	ACLMessage msgPong 	= null;
    nMails             	= 0;
    oMails              = null;
    
    nMails = myAgent.getCurQueueSize();
	
	if ( nMails > 0 ) {
		
		for( i=1; i <= nMails; i++) {
			
			msgPong = myAgent.receive();
			
			if (msgPong.getReplyWith() == null) {
				  trackMails.put( i, msgPong );
			} 
		}
	}
	
	print("Size of queue: "+ trackMails.size() );

	oMails = trackMails.keySet().toArray();
	Arrays.sort(oMails);

	print( "-------------------------------------------------\n");
	for( a : oMails ) {
		print( a + "----" + trackMails.get(a)  + "\n");       
	}
	
	for( a : oMails ) {
		if ( pTest10 .match( trackMails.get(a) ) ) {
			// Answers from pings messages
			// ------------------------------------------------------------------------------------------------
			//4----(INFORM
			//		 :sender  ( agent-identifier :name dpsNodeAC@192.168.122.1:1099/JADE  :addresses (sequence http://localhost.localdomain:7778/acc ))
			//		 :receiver  (set ( agent-identifier :name analizador@192.168.122.1:1099/JADE  :addresses (sequence http://localhost.localdomain:7778/acc )) )
			//		 :content  "Test:7:1602348227758:dpsNodeAC:1602348227969:dpsNodeAC:" 
			//		 :ontology  presence )
			//  :content  "Test:3:1602365444277:dpsNodeAC:1602365444279:dpsNodeAC:" 
			pContents = (trackMails.get(a).getContent()).split(":");
			testAgen  = pContents[3];
			testNum   = pContents[1];
			testInit  = pContents[2];
			testEnd   = pContents[4];
            t2        = Long.parseUnsignedLong(pContents[4]);
			t1		  = Long.parseUnsignedLong(pContents[2]);
			testTime  = (  t2 - t1  ).toString();
			
		} else {
			// Answers from rule-based engines
			sContents = (trackMails.get(a).getContent()).split(":");
			testAgen  = trackMails.get(a).getUserDefinedParameter("psSender");
			testNum   = sContents[1];
			testInit  = trackMails.get(a).getUserDefinedParameter("psTimeInit");
			testEnd   = (trackMails.get(a).getPostTimeStamp() ).toString();
			// betaTime = ((trackMails.get(a).getUserDefinedParameter("psTimeEnd")).split(" "))[0];
			deltaTime  = trackMails.get(a).getPostTimeStamp() - 
					Long.parseUnsignedLong(trackMails.get(a).getUserDefinedParameter("psTimeInit"));
			testTime  = deltaTime.toString();
		}
		
		// Dataset ready to use in R.
		String CSV = ",";
		print( testNum +CSV+ testInit +CSV+ testTime +CSV+ testEnd +CSV+ testAgen +CSV );
		
	}
}




// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Those are Comparative's Defaults...
// ---------------------------------------------------------------------------

defaultAgent       = DPS_AGENT_NAME;
defaultAnalysis    = BOTH_MESSAGES; // ONLY_PING_MESSAGES;  // ONLY_SUDUKUS_MESSAGES;   // BOTH_MESSAGES;   // NONE_MESSAGES;

waitTime           = 2200L;  //   2  sec. before beginning.
timeGap            = 250L;   // 250  ms.  between tests.
wakeUpTm           = 0L;
sudokuTestNames    = new String[] { 	"grid3x3-p7.clp",  
		                                "grid3x3-p1.clp", 
                                        "grid3x3-p17.clp", 
                                        "grid3x3-p10.clp"};



// ----------------------------------------------------------------------------
// Raw test begins here...
// ----------------------------------------------------------------------------
// analizador( defaultAgent,  defaultAnalysis );



//Banners ------------------------------------------------------
faseBann   = "Comparative analysis: status information" ; 
phaseBanner( faseBann );
//---------------------------------------------------------------
testName   = "Finished. Please, type  makeDataset() 15 seconds after this message." ; 



// End of load analizador.bsh
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------




